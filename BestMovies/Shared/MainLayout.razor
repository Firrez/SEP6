@using BestMovies.Services
@using BestMovies.Services.implementation
@using LoginComponent
@using BestMovies.Models.ApiModels
@using BestMovies.Models
@inherits LayoutComponentBase
@* @inject NavigationManager Navigation *@
@inject IUserLoginService LoginService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>BestMovies</PageTitle>

<MudThemeProvider Theme="_theme"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudAppBar Color="Color.Primary" Fixed="false">
    <MudIconButton Icon="@Icons.Material.Filled.House" Edge="Edge.Start" Href="/"/>
    <MudSpacer/>

    @* Search Field *@
    <Search ResultClickCallBack="@OnClickNavigateSearchResult"/>
    <MudTooltip Text="Discover by genre">
        <MudIconButton Icon="@Icons.Material.Filled.List" Href="/Genres"/>
    </MudTooltip>
    <MudSpacer/>

    @* Account *@
    <AuthorizeView>
        <Authorized>
            <MudIconButton Icon="@Icons.Material.Filled.Person" href="@($"/UserPage/{_userId}")"/>
            <MudIconButton Icon="@Icons.Material.Filled.Logout" href="/" OnClick="PerformLogout"/>
        </Authorized>
        <NotAuthorized>
            <MudIconButton Icon="@Icons.Material.Filled.Login" OnClick="@(() => { _isOpenLogin = !_isOpenLogin; _isOpenCreateAccount = false; })"/>
        </NotAuthorized>
    </AuthorizeView>
    
    <MudPopover Class="z-10" Open="@_isOpenLogin" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.TopCenter">
        <MudContainer >
            <MudIconButton OnClick="@CloseLoginPopUp" Class="ml-auto mr-n3 mb-1" Icon="@Icons.Material.Filled.Close" Color="Color.Error"/>
            <Login ConfirmCallBackListener="@CloseLoginPopUp"/>
        </MudContainer>
        <MudButton OnClick="@(() => { CloseLoginPopUp(); _isOpenCreateAccount = true; })">Don't have an acccount?</MudButton>
    </MudPopover>
    
    <MudPopover Class="z-10" Open="@_isOpenCreateAccount" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.TopCenter">
        <MudContainer >
            <MudIconButton OnClick="@CloseCreateUserPopUp" Class="ml-auto mr-n3 mb-1" Icon="@Icons.Material.Filled.Close" Color="Color.Error"/>
            <CreateUser ConfirmCallBackListener="@CloseCreateUserPopUp"/>
        </MudContainer>
    </MudPopover>
</MudAppBar>


<div class="page">
    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    
    private bool _isOpenLogin;
    private bool _isOpenCreateAccount;

    
    private void CloseLoginPopUp()
    {
        _isOpenLogin = false;
        StateHasChanged();
    }
    
    private void CloseCreateUserPopUp()
    {
        _isOpenCreateAccount = false;
        _isOpenLogin = true;
        StateHasChanged();
    }
    
    private readonly MudTheme _theme = new()
    {
        Palette = new PaletteLight
        {
            Primary = "#34D5B2",
            Secondary = "#2AFC98",
            Tertiary = "#2DE1FC",
            Info = "#FFFFFF",
            Dark = "#12263A"
        }
    };

    private Guid _userId;

    private async Task PerformLogout()
    {
        ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
    }

    private void OnClickNavigateSearchResult(SearchResult result)
    {
        switch (result.GetEntityType())
        {
            case EntityType.Movie:
                NavigationManager.NavigateTo($"/Movie/{result.Id}", true);
                break;
            case EntityType.Actor:
                NavigationManager.NavigateTo($"/CelebrityPage/{result.Id}", true);
                break;
            case EntityType.Director:
                NavigationManager.NavigateTo($"/CelebrityPage/{result.Id}", true);
                break;
            case EntityType.Producer:
                NavigationManager.NavigateTo($"/CelebrityPage/{result.Id}", true);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (LoginService.IsLoggedIn)
            {
                Console.WriteLine("+ User is Logged In");
                _userId = LoginService.GetCurrentUserAsync().Result.Id;
            }
            else
            {
                Console.WriteLine("- User is Logged Out");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        return base.OnAfterRenderAsync(firstRender);
    }

}