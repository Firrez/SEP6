@page "/Movie/{MovieId?}"
@using BestMovies.Services
@using BestMovies.Models.DbModels
@using BestMovies.Models.ApiModels
@using Microsoft.IdentityModel.Tokens
@using System.Globalization
@using BestMovies.Models

@inject IMovieService MovieService
@inject IUserService UserService
@inject IUserLoginService UserLoginService
@inject IUserInteractionService UserInteractionService
@inject IPeopleService PeopleService
@inject ISnackbar Snackbar

@if (_movieData is null)
{
    return;
}

<MudContainer>
    <MudStack Row AlignItems="AlignItems.Center">
        <MudTooltip Text="@_originalTitle" Arrow="true">
            <MudText Align="Align.Center" Typo="Typo.h2" Color="Color.Primary">@_title</MudText>
        </MudTooltip>
        <div hidden="@(!_adultRating)">
            <MudChip Text="ADULT MOVIE" Color="Color.Error" Variant="Variant.Filled"/>
        </div>
        <MudSpacer/>
        <AuthorizeView>
            <Authorized>
                <MudTooltip Text="Favourite">
                    <MudToggleIconButton @bind-Toggled="Favourite" Size="Size.Large" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.Star" ToggledIcon="@Icons.Material.Filled.Star" Color="Color.Secondary" ToggledColor="Color.Info"/>
                </MudTooltip>
            </Authorized>
            <NotAuthorized>
                <MudTooltip Text="Favourite">
                    <MudToggleIconButton ToggledChanged="@(() => Snackbar.Add("Login to add Favorite", Severity.Warning))" Size="Size.Large" Variant="Variant.Filled" Icon="@Icons.Material.Outlined.Star" ToggledIcon="@Icons.Material.Filled.Star" Color="Color.Secondary"/>
                </MudTooltip>
            </NotAuthorized>
        </AuthorizeView>
    </MudStack>

    <MudTabs Centered Rounded>
        @* Details Page + Comments *@
        <MudTabPanel Text="Details">
            <MudPaper Elevation="3" Style="padding: 1em; margin-bottom: 3em;">
                <MudStack Row>
                    <MudStack Justify="Justify.SpaceBetween">
                        @* Summary *@
                        <MudPaper Elevation="0">
                            <MudText Typo="Typo.button">
                                Summary
                            </MudText>

                            <MudText Typo="Typo.body1">
                                @_movieData?.Overview
                            </MudText>
                        </MudPaper>

                        @* Director[s] *@
                        <MudStack>
                            <MudText Typo="Typo.button">Director</MudText>
                            <MudStack Row AlignItems="AlignItems.Center">
                                <MudImage Width="80" Src="@(ConfigVariables.NoImage)"/>
                                <MudText>NAME OF DIRECTOR</MudText>
                            </MudStack>
                        </MudStack>
                        
                        @* Statistics *@
                        <MudStack Spacing="1">
                            <MudText Typo="Typo.button">Statistics</MudText>
                            <MudText Typo="Typo.subtitle2">BestMovies Score</MudText>
                            <MudRating MaxValue="5" SelectedValue="@GetBestMoviesRating()" ReadOnly/>
                            <MudText Typo="Typo.caption">@($"{Reviews.Count} Votes")</MudText>
                            <MudText Class="mt-6" Typo="Typo.subtitle2">IMDb Score</MudText>
                            <MudRating MaxValue="10" SelectedValue="@GetIMDbRating()" ReadOnly/>
                            <MudText Typo="Typo.caption">@($"{_movieData.VoteCount.Value} Votes")</MudText>
                        </MudStack>
                    </MudStack>

                    <MudSpacer/>
                    <MudDivider Vertical="true" FlexItem="true"/>

                    @* Right side [Poster, Genre, Stats] *@
                    <MudStack AlignItems="AlignItems.Center">
                        <MudImage Width="250" disabled="@_imagePath.IsNullOrEmpty()" Src="@_imagePath"/>

                        <MudChipSet>
                            @foreach (var genre in _genres)
                            {
                                <MudChip Value="@(genre.Id)" Text="@(genre.Name)" Href="@($"/Genres?id={genre.Id}")"/>
                            }
                        </MudChipSet>

                        <MudSimpleTable Dense Bordered Striped>
                            <tbody>
                            <MudTr>
                                <MudTd Style="font-weight: bold;">Language</MudTd><MudTd Style="font-weight: lighter">@_originalLanguage</MudTd>
                            </MudTr>
                            <MudTr>
                                <MudTd Style="font-weight: bold;">Runtime</MudTd><MudTd Style="font-weight: lighter">@_runtime min</MudTd>
                            </MudTr>
                            <MudTr>
                                <MudTd Style="font-weight: bold;">Released</MudTd><MudTd Style="font-weight: lighter">@_releaseDate</MudTd>
                            </MudTr>
                            <MudTr>
                                <MudTd Style="font-weight: bold;">Budget</MudTd><MudTd Style="font-weight: lighter">@_budget</MudTd>
                            </MudTr>
                            <MudTr>
                                <MudTd Style="font-weight: bold;">Revenue</MudTd><MudTd Style="font-weight: lighter">@_revenue</MudTd>
                            </MudTr>
                            </tbody>
                        </MudSimpleTable>
                    </MudStack>
                </MudStack>
            </MudPaper>
            <SimilarSection MovieId="@MovieId"/>
            <br/>
            <CommentSection SubjectId="@MovieId"/>
        </MudTabPanel>

        @* Cast Page *@
        <MudTabPanel Text="Cast">
            <MudPaper Style="padding-top: .1em; padding-bottom: .1em;">
                <CastSection MovieId="@MovieId"/>
                @*@foreach (var actor in _actors)
                {
                    <MudStack Row Style="margin: 1em;">
                        <MudImage Src="@ConfigVariables.NoImage" Height="80" Alt="@($"Image of {actor.Id}")"/>
                        <MudText Typo="Typo.overline">@actor.Id</MudText>
                        <MudSpacer/>
                        <MudText Typo="Typo.body1">Role</MudText>
                    </MudStack>
                }*@
            </MudPaper>
        </MudTabPanel>

        @* Review Page *@
        <MudTabPanel Text="Reviews">
            <ReviewSection SubjectId="@MovieId"/>
        </MudTabPanel>

    </MudTabs>
</MudContainer>


@code {

    [Parameter]
    public string MovieId { get; set; }

    private Movie? _movieData;
    private string _title = "?";

    private bool _favourite;

    private List<Review> Reviews { get; set; } = new(); 

    bool Favourite
    {
        get => _favourite;
        set
        {
            _favourite = value;
            SetFavouriteAsync();
        }
    }

    #region Details

    private string _originalTitle = "?";
    private string _originalLanguage = "?";
    private string _imagePath = ConfigVariables.NoImage;
    private List<Genre> _genres = new();
    private bool _adultRating;
    private int _budget;
    private long _revenue;
    private int _runtime;
    private DateOnly _releaseDate;

    private async Task SetupDetails()
    {
        _title = _movieData.Title;
        _originalTitle = _movieData.OriginalTitle;

    // Sets the Image to "No Image" default if no poster is found
        _imagePath = _movieData.PosterPath.IsNullOrEmpty() ? ConfigVariables.NoImage : $"https://image.tmdb.org/t/p/w200{_movieData.PosterPath}";

        _runtime = _movieData.Runtime ?? -1;

        _genres = _movieData.Genres;

        _adultRating = _movieData.Adult ?? false;
        if (_adultRating)
        {
            Console.WriteLine("ITS PORN");
        }

        _releaseDate = DateOnly.Parse(_movieData.ReleaseDate);

    // Language
        var cultures = CultureInfo.GetCultures(CultureTypes.AllCultures);
        var culture = cultures.First(c => c.TwoLetterISOLanguageName == _movieData.OriginalLanguage);
        _originalLanguage = culture.DisplayName;

    // Money
        _budget = _movieData.Budget ?? -1;
        _revenue = _movieData.Revenue ?? -1;
    }

    #endregion Details

    #region Cast

    private List<Person> _actors;

    private async Task SetupCast()
    {
        _actors = await PeopleService.GetCastOfLinkedSubjectAsync(new List<LinkedSubject>());
    }

    #endregion Cast

    protected override async Task OnParametersSetAsync()
    {
        _movieData = await MovieService.GetMovieAsync(MovieId);
        Reviews = await UserInteractionService.GetReviewsOfAsync(MovieId);

        await SetupDetails();
        await SetupCast();

    // TODO: Change this to use the Service instead
        _favourite = true;
        var currentUser = await UserLoginService.GetCurrentUserAsync();
        if (currentUser != null)
        {
            _favourite = !await UserService.IsFavorite(currentUser.Id.ToString(),_movieData.Id.ToString());
        }
        
    }

    private int GetIMDbRating()
    {
        if (_movieData?.VoteAverage is null) return 0;
        Console.WriteLine(_movieData.VoteAverage.Value);
        return (int) Math.Round(_movieData.VoteAverage.Value, MidpointRounding.AwayFromZero);
    }

    private int GetBestMoviesRating()
    {
        if (Reviews.IsNullOrEmpty()) return 0;
        return Reviews.Sum(r => r.Rating) / Reviews.Count;
    }

    private async Task SetFavouriteAsync()
    {
        var user = await UserLoginService.GetCurrentUserAsync();
        if (!_favourite)
        {
            Favourite newFav = new()
            {
                Id = Guid.Empty,
                UserId = user.Id,
                SubjectId = _movieData.Id.ToString(),
                Type = EntityType.Movie,
            };

            user.Favourites.Add(newFav);
            Console.WriteLine($"Adding {_title} as Favourite");
            await UserService.AddFavourite(newFav);
        }
        else
        {
    // TODO: Remove the Movie from the User Favourites
            var favorite = user.Favourites.First(f => f.SubjectId.ToString() == _movieData.Id.ToString());
            user.Favourites.Remove(favorite);
            Console.WriteLine($"Removing {_title} from Favourites");
            await UserService.RemoveFavourite(favorite);
        }

    
    }

}