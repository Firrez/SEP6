@using BestMovies.Services
@using BestMovies.Models.ApiModels
@using Microsoft.IdentityModel.Tokens
@inject IMovieService MovieService
@inject NavigationManager NavigationManager
<MudTable Hover
          Breakpoint="Breakpoint.Sm"
          Height="650px"
          FixedHeader
          Items="@Credits"
          GroupBy="@_groupDefinition"
          Dense
          T="CreditModel"
          OnRowClick="@(c => NavigationManager.NavigateTo($"/CelebrityPage/{c.Item.Id}"))">
    <ColGroup>
        <col/>
        <col/>
        <col/>
        <col/>
    </ColGroup>
    <HeaderContent>
        <MudTh>Portrait</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>As</MudTh>
        <MudTh>Popularity</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="4">@($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Portrait">
                <img src="@GetImage(context.Image)" width="92" alt="portrait"/>
            </MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="As">@context.Role</MudTd>
            <MudTd DataLabel="Popularity">@context.Popularity</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    
    [Parameter]
    public string? MovieId { get; set; }

    private List<CreditModel> Credits { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (MovieId is null or "") throw new Exception($"Invalid Id: {MovieId}");
        var creditWrapper = await MovieService.GetCreditsFromMovieAsync(MovieId);
        Credits.AddRange(creditWrapper.Cast.Select(c => new CreditModel
        {
            Id = c.Id ?? 0,
            Name = c.Name ?? "",
            Role = c.Character ?? "",
            Department = "Actor",
            Image = c.ProfilePath ?? "",
            Popularity = c.Popularity ?? 0
        }));
        Credits.AddRange(creditWrapper.Crew.OrderBy(c => c.Department).Select(c => new CreditModel
        {
            Id = c.Id ?? 0,
            Name = c.Name ?? "",
            Role = c.Job ?? "",
            Department = c.Department ?? "",
            Image = c.ProfilePath ?? "",
            Popularity = c.Popularity ?? 0
        }));
    }

    private readonly TableGroupDefinition<CreditModel> _groupDefinition = new()
    {
        GroupName = "Department",
        Indentation = false,
        Expandable = false,
        Selector = c => c.Department
    };

    private string GetImage(string uri)
    {
        return uri.IsNullOrEmpty() ? ConfigVariables.NoImage : $"https://image.tmdb.org/t/p/w92{uri}";
    }

    private class CreditModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Role { get; set; }
        public string Department { get; set; }
        public string Image { get; set; }
        public double Popularity { get; set; }
    }
}