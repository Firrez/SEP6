@using BestMovies.Models.ApiModels
@using BestMovies.Models.DbModels
@using BestMovies.Services
@using Microsoft.IdentityModel.Tokens
@using BestMovies.Models

@inject IUserLoginService UserLoginService
@inject IUserInteractionService UserInteractionService

<MudPaper Elevation="0" Outlined="false" Style="margin-outside: 10em;">
    <MudContainer>

        <MudText Typo="Typo.h5">Create a Fanmovie</MudText>
        <MudTextField @bind-Value="@Title" Label="Title"/>
        <MudTextField @bind-Value="@MovieDescription" Label="Description"/>
    </MudContainer>
    <MudContainer>
        Select

        <MudCard Style="z-index: -10;">
            <Search ResultClickCallBack="@SelectFromSearch"/>
        </MudCard>

        <MudStack Row>
            <MudStack>

                @if (_stagedBeforeAdd != null)
                {
                    <MudStack Row AlignItems="AlignItems.Center">
                        <img src="@GetImage(_stagedBeforeAdd.Image)" width="45" alt="poster"/>
                        @_stagedBeforeAdd.Name
                    </MudStack>
                }
                else
                {
                    <MudStack Row AlignItems="AlignItems.Center">
                        <img src="@GetImage("")" width="45" alt="poster"/>
                    </MudStack>
                }

                <MudTextField @bind-Value="@RoleDescription" Label="Role Description"/>
            </MudStack>
            <MudSpacer/>
            <MudStack>

                <MudSelect T="string" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" @bind-Value="AsRole"
                           DisableUnderLine Margin="Margin.Dense" Style="min-width: 100px; width: 100px">

                    <MudSelectItem Value="@("InspiredBy")">Inspired by</MudSelectItem>
                    <MudSelectItem Value="@("Actor")">Actor</MudSelectItem>
                    <MudSelectItem Value="@("Director")">Director</MudSelectItem>

                </MudSelect>

                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddToFanMovie">Add to Movie</MudButton>
            </MudStack>
        </MudStack>

        <MudStack Row>
            <MudList>
                <h3>Actors</h3>
                @foreach (var actor in _actorsDict)
                {
                    <MudListItem @onclick="() => { _actorsDict.Remove(actor.Key); _stagedBeforeAdd = actor.Value; }">
                        <MudStack Row AlignItems="AlignItems.Center">
                            <img src="@GetImage(actor.Value.Image)" width="45" alt="poster"/>
                            @* @actor.Value.Name *@
                            @actor.Key.Description
                        </MudStack>
                    </MudListItem>
                }
            </MudList>
            <MudList>
                <h3>Directors</h3>
                @foreach (var director in _directorsDict)
                {
                    <MudListItem @onclick="() => { _directorsDict.Remove(director.Key); _stagedBeforeAdd = director.Value; }">
                        <MudStack Row AlignItems="AlignItems.Center">
                            <img src="@GetImage(director.Value.Image)" width="45" alt="poster"/>
                            @director.Value.Name
                            @director.Key.Description
                        </MudStack>
                    </MudListItem>
                }
            </MudList>
            <MudList>
                <h3>Inspired By</h3>
                @foreach (var inspiration in _inspiredByDict)
                {
                    <MudListItem @onclick="() => { _inspiredByDict.Remove(inspiration.Key); _stagedBeforeAdd = inspiration.Value; }">
                        <MudStack Row AlignItems="AlignItems.Center">
                            <img src="@GetImage(inspiration.Value.Image)" width="45" alt="poster"/>
                            @inspiration.Value.Name
                            @inspiration.Key.Description
                        </MudStack>
                    </MudListItem>
                }
            </MudList>

        </MudStack>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="PostFanMovie">Create Fan Movie</MudButton>
    </MudContainer>
</MudPaper>

@code {
    
    private string Title { get; set; }
    private string MovieDescription { get; set; }
    
    // Result that has been selected from the Search Menu
    private SearchResult? _stagedBeforeAdd;
    
    // Things that have been added to the Fan Movie
    private Dictionary<LinkedSubject, SearchResult> _actorsDict = new();
    private Dictionary<LinkedSubject, SearchResult> _directorsDict = new();
    private Dictionary<LinkedSubject, SearchResult> _inspiredByDict = new();


    // When selecting a new Celeb / Movie
    private string AsRole { get; set; } = "Actor";
    private string RoleDescription { get; set; }

    List<LinkedSubject> _linkedSubjects = new();
    
    private void SelectFromSearch(SearchResult searchResult)
    {
        _stagedBeforeAdd = searchResult;

        StateHasChanged();
    }
    
    private void AddToFanMovie()
    {
        if (_stagedBeforeAdd == null) return;

        LinkedSubject asLinkedSubject = new LinkedSubject { Id = Guid.Empty, ReferenceId = Guid.Empty, SubjectId = _stagedBeforeAdd.Id.ToString(), Description = RoleDescription };

        switch (AsRole)
        {
            case "Actor":
                asLinkedSubject.Type = EntityType.Actor;
                _actorsDict.Add(asLinkedSubject, _stagedBeforeAdd);
                break;
            case "Director":
            {
                asLinkedSubject.Type = EntityType.Director;
                if (!_directorsDict.Keys.ToList().Exists(l => l.SubjectId == _stagedBeforeAdd.Id.ToString()))
                    _directorsDict.Add(asLinkedSubject, _stagedBeforeAdd);
                break;
            }
            case "InspiredBy":
            {
                asLinkedSubject.Type = EntityType.Movie;
                if (!_inspiredByDict.Keys.ToList().Exists(l => l.SubjectId == _stagedBeforeAdd.Id.ToString()))
                    _inspiredByDict.Add(asLinkedSubject, _stagedBeforeAdd);
                break;
            }
        }
        
        // Reset visual fields
        RoleDescription = "";
        _stagedBeforeAdd = null;
        StateHasChanged();
    }


    private async void PostFanMovie()
    {
        var currentUser = await UserLoginService.GetCurrentUserAsync();

        _linkedSubjects.AddRange(_actorsDict.Keys);
        _linkedSubjects.AddRange(_directorsDict.Keys);
        _linkedSubjects.AddRange(_inspiredByDict.Keys);

        FanMovie newFanMovie = new FanMovie { Id = Guid.Empty, Title = Title, UserId = currentUser.Id, Description = MovieDescription, LinkedEntities = _linkedSubjects };
        UserInteractionService.AddFanMovieAsync(newFanMovie);

        _actorsDict = new Dictionary<LinkedSubject, SearchResult>();
        _directorsDict = new Dictionary<LinkedSubject, SearchResult>();
        _inspiredByDict = new Dictionary<LinkedSubject, SearchResult>();
        _linkedSubjects = new List<LinkedSubject>();
    }

    private string GetImage(string? imagePath)
    {
        if (imagePath.IsNullOrEmpty()) return ConfigVariables.NoImage;
        return $"https://image.tmdb.org/t/p/w45{imagePath}";
    }

}