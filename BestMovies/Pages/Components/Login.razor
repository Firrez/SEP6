@page "/login"
@using BestMovies.Services.implementation
@using BestMovies.Pages.util
@namespace LoginComponent

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<AuthorizeView >
    <NotAuthorized>
        <MudPaper Elevation="0">
            <MudText Align="Align.Center">Login</MudText>
            <MudStack Justify="Justify.Center">
                <MudTextField T="string" @bind-value="_username" Placeholder="Username" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" OnKeyDown="AttemptLogin"/>
                <MudSpacer/>
                <MudTextField T="string" @bind-value="_password" Placeholder="Password" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" InputType="InputType.Password" OnKeyDown="AttemptLogin"/>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@PerformLogin" Class="ml-auto">Login!</MudButton>
            </MudStack>
        </MudPaper>
        <MudSpacer/>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string _username;
    private string _password;
    private string _errorMessage;
    
    [Parameter] public Action? ConfirmCallBackListener { get; set; }

    public void AttemptLogin(KeyboardEventArgs e)
    {
    // If the User has pressed Enter, attempt a login
        if (e.Key == "Enter")
        {
            PerformLogin();
        }
    }

    public async Task PerformLogin()
    {
        _errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).ValidateLogin(_username, PasswordHashing.HashString(_password));
            _username = "";
            _password = "";
            Snackbar.Add("login successful!", Severity.Success , key: "Success!");
            ConfirmCallBackListener?.Invoke();
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            Snackbar.Add("Invalid login!", Severity.Error, key: "LoginError");
        }
    }
}