@page "/CommentSection/{subjectId?}"
@using BestMovies.Models.DbModels
@using BestMovies.Services

@inject IUserService UserService
@inject IUserInteractionService UserInteractionService
@inject IUserLoginService UserLoginService


<MudCard>
    <MudCardHeader>
        <h3>Comments</h3>
    </MudCardHeader>
    <MudCardContent>
        <div>
            @foreach (var comment in _comments)
            {
                @GetNameOfUser(comment.UserId.ToString()).Result;
                <MudStack Row Style="margin: 1em;">
                    <MudImage Src="@ConfigVariables.NoImage" Height="80" Alt="@($"Image of ")"/>
                    <MudSpacer/>
                    <MudText Typo="Typo.body1"><p>@comment.Text</p></MudText>
                </MudStack>
            }
        </div>
        <Authorized>
            <MudTextField @bind-Value="@_newCommentText" Label="Add a comment" Multiline="true" Rows="3" Variant="Variant.Filled"/>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@string.IsNullOrEmpty(_newCommentText)" @onclick="AddComment">Post Comment</MudButton>
        </Authorized>
    </MudCardContent>
</MudCard>


@code {
    
    [Parameter]
    public string SubjectId { get; set; }

    string _newCommentText;

    List<Comment> _comments;

    protected override async Task OnInitializedAsync()
    {

        _comments = UserInteractionService.GetCommentsOf(SubjectId);
        
    }
        
    protected override async Task OnParametersSetAsync()
    {
        
        
    }

    
    async Task AddComment()
    {

        Console.WriteLine("Create new comment " + _newCommentText);
        var currentUser = await UserLoginService.GetCurrentUserAsync();
        UserInteractionService.AddCommentAsync(new Comment { Id = Guid.Empty, SubjectId = SubjectId, UserId = currentUser.Id, Text = _newCommentText});
    }

    async Task<string> GetNameOfUser(string userid)
    {
        return await UserService.GetUserName(userid);
    }
    
}