@page "/UserPage/{userOfPageID}"
@using BestMovies.Models.ApiModels
@using BestMovies.Models.DbModels
@using BestMovies.Services
@using Microsoft.IdentityModel.Tokens

@inject IUserLoginService UserLoginService
@inject IUserService UserService
@inject IMovieService MovieService

@if (_loading)
{
    <MudProgressCircular Indeterminate/>
}

else if (_userOfPage == null)
{
    <p>
        <em>No User found :/</em>
    </p>
}
else
{

    <MudPaper Elevation="0" Outlined="false" Style="margin-top: 1em;">

        <MudGrid href="@_userOfPage">
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h3">Info</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <!-- User information -->
                        <MudText Typo="Typo.overline">
                            @_userOfPage.Username
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudSpacer/>
            <MudItem>
                <MudCard>
                    <MudCardContent>
                        @if (_favouriteMovies.IsNullOrEmpty())
                        {
                            <MudText Typo="Typo.overline">No Favourites</MudText>
                        }
                        else
                        {
                            <MudList>
                                @foreach (var m in _favouriteMovies)
                                {
                                    <MudListItem>
                                        <p>@m.Title</p>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                        <div style="border: 1px solid #ccc; padding: 10px; visibility: hidden;">
                            <h3>Favorite Movies</h3>
                            <!-- Movie list -->
                            @if (!_favouriteMovies.IsNullOrEmpty())
                            {
                                <ul>
                                    @foreach (var movie in _favouriteMovies)
                                    {
                                        <li>@movie.Title</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No movies available.</p>
                            }
                        </div>
                    </MudCardContent>
                </MudCard>
                <MudCard style="margin-top: 20px;">
                    <MudCardContent>
                        <div style="border: 1px solid #ccc; padding: 10px;">
                            <h3>Fan Movie List</h3>
                            <!-- Fan movie list -->
                            @if (_fanMovies != null)
                            {
                                <ul>
                                    @foreach (var fanMovie in _fanMovies)
                                    {
                                        <li>@fanMovie.Description</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No fan movies available.</p>
                            }
                        </div>

                        @if (_isUsersOwnPage)
                        {
                            <MudButton Color="Color.Primary" Variant="Variant.Filled">Create Fan Movie</MudButton>
                        }

                    </MudCardContent>
                </MudCard>

            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {

    [Parameter]
    public string userOfPageID { get; set; }

    bool _loading = true;
    bool _isUsersOwnPage = false;

    User? _userOfPage;
    User? _currentUser;

    List<FanMovie>? _fanMovies;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await UserLoginService.GetCurrentUserAsync();
        _userOfPage = await UserService.GetAsync(userOfPageID);

        // Check if the user is on their own page
        _isUsersOwnPage = _userOfPage.Id == _currentUser?.Id;

    //     try
    //     {
    // Use the UserService to get Fan movies and Favourites
    // _fanMovies = _userOfPage.FanMovies;
    
    // Add ID of all Movies in the List
    //     foreach (Favourite f in _userOfPage.Favourites)
    //     {
    //         if (f.Type == EntityType.Movie)
    //         {
    //             _favouriteMovieIds.Add(f.SubjectId);
    //         }
    //     }
    //     _userOfPage.Favourites.Where(f => f.Type == EntityType.Movie).ToList().ForEach(m => _favouriteMovieIds.Add(m.SubjectId));
    //     }
    //     catch (Exception e)
    //     {
    //         Console.WriteLine(e);
    //     }

        _loading = false;
    }

    protected override Task OnParametersSetAsync()
    {
        _maxFavouriteMovieTabs = (_favouriteMovies?.Count / _favouritesShownInList) + 1 ?? 0;

        GetFavouriteMovies();
        UpdateShownFavouriteMovies();

        return base.OnParametersSetAsync();
    }

    private int _favouritesShownInList = 5;

    private int _fanMovieTab = 0;

#region Favourite Movies
    private List<long> _favouriteMovieIds = new();

    private int _favouriteMovieTab = 0;
    private List<Movie> _favouriteMovies = new();
    private List<Movie> _shownFavMovies = new();
    private int _maxFavouriteMovieTabs;

    private void GetFavouriteMovies()
    {
        _favouriteMovieIds.ForEach(async id =>
        {
            Movie m = await MovieService.GetMovieAsync(id.ToString());
            _favouriteMovies.Add(m);
        });
    }

    private void UpdateShownFavouriteMovies()
    {
        _shownFavMovies = _favouriteMovies.Skip(_maxFavouriteMovieTabs * _favouriteMovieTab).Take(_maxFavouriteMovieTabs).ToList();
    }
#endregion
}