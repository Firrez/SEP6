@page "/UserPage/{userOfPageID}"
@using BestMovies.Models.ApiModels
@using BestMovies.Models.DbModels
@using BestMovies.Services
@using Microsoft.IdentityModel.Tokens

@inject IUserLoginService UserLoginService
@inject IUserService UserService
@inject IUserInteractionService UserInteractionService
@inject IMovieService MovieService

@if (_loading)
{
    <MudProgressCircular Indeterminate/>
}

else if (_userOfPage == null)
{
    <p>
        <em>No User found :/</em>
    </p>
}
else
{
    <MudPaper Elevation="0" Outlined="false" Style="margin-top: 1em;">

        <MudGrid href="@_userOfPage">
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h3">Info</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <!-- User information -->
                        <MudText Typo="Typo.overline">
                            @_userOfPage.Username
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudSpacer/>
            <MudItem>
                <MudCard>
                    <MudCardContent>
                        @if (_favouriteMovies.IsNullOrEmpty())
                        {
                            <MudText Typo="Typo.overline">No Favourites</MudText>
                        }
                        else
                        {
                            <MudList>
                                @foreach (var m in _favouriteMovies)
                                {
                                    <MudListItem>
                                        <p>@m.Title</p>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudCardContent>
                </MudCard>
                <MudCard style="margin-top: 20px;">
                    <MudCardContent>
                        <MudStack>
                            @if (_fanMovies.IsNullOrEmpty())
                            {
                                <MudText Typo="Typo.overline">No Favourites</MudText>
                            }
                            else
                            {
                                <MudList>
                                    @foreach (var m in _fanMovies)
                                    {
                                        <MudListItem>
                                            @* Title of the Fan Movie *@
                                            @* If this is clicked, it should show the description and cast set for the movie *@
                                            <p>@m.Description</p>
                                        </MudListItem>
                                    }
                                </MudList>
                            }

                            @if (_isUsersOwnPage)
                            {
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CreateFanMovie">Create Fan Movie</MudButton>
                            }

                        </MudStack>
                    </MudCardContent>
                </MudCard>

            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {

    [Parameter]
    public string userOfPageID { get; set; }

    bool _loading = true;
    bool _isUsersOwnPage;

    User? _userOfPage;
    User? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        _currentUser = await UserLoginService.GetCurrentUserAsync();
        _userOfPage = await UserService.GetAsync(userOfPageID);

    // Check if the user is on their own page
        _isUsersOwnPage = _userOfPage.Id == _currentUser?.Id;

        _loading = false;
    }

    protected override Task OnParametersSetAsync()
    {
        _maxFavouriteMovieTabs = (_favouriteMovies?.Count / _favouriteMoviesShownInList) + 1 ?? 0;
        _maxFanMovieTabs = (_fanMovies?.Count / _fanMoviesShownInList) + 1 ?? 0;

        GetFavouriteMovies();
        UpdateShownFavouriteMovies();

        GetFanMovies();

        return base.OnParametersSetAsync();
    }

    #region Fan Movies

    private List<long> _fanMovieIds = new();

    private int _fanMoviesShownInList = 5;
    private int _fanMovieTab = 0;
    private List<FanMovie> _fanMovies = new();
    private List<FanMovie> _shownFanMovies = new();
    private int _maxFanMovieTabs;

    private async void GetFanMovies()
    {
        _fanMovies = await UserInteractionService.GetAllFanMoviesByUserAsync(userOfPageID);

        StateHasChanged();
    }

    private void UpdateShownFanMovies()
    {
        _shownFanMovies = _fanMovies.Skip(_maxFanMovieTabs * _fanMovieTab).Take(_maxFanMovieTabs).ToList();
    }

    #endregion

    #region Favourite Movies

    private List<long> _favouriteMovieIds = new();

    private int _favouriteMoviesShownInList = 5;
    private int _favouriteMovieTab = 0;
    private List<Movie> _favouriteMovies = new();
    private List<Movie> _shownFavMovies = new();
    private int _maxFavouriteMovieTabs;

    private void GetFavouriteMovies()
    {
        _favouriteMovieIds.ForEach(async id =>
        {
            Movie m = await MovieService.GetMovieAsync(id.ToString());
            _favouriteMovies.Add(m);
        });
    }

    private void UpdateShownFavouriteMovies()
    {
        _shownFavMovies = _favouriteMovies.Skip(_maxFavouriteMovieTabs * _favouriteMovieTab).Take(_maxFavouriteMovieTabs).ToList();
    }

    #endregion

    private void CreateFanMovie()
    {
        FanMovie newMovie = new FanMovie()
        {
            Id = Guid.Empty,
            UserId = _currentUser.Id,
            LinkedEntities = new(),
            Description = "Avatar: The Last Airbender. But everything is from the perspective of General Iroh"
        };

        UserInteractionService.AddFanMovieAsync(newMovie);
    }

}