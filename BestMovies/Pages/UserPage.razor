@page "/UserPage/{userOfPageID}"
@using BestMovies.Models.ApiModels
@using BestMovies.Models.DbModels
@using BestMovies.Services
@using Microsoft.IdentityModel.Tokens
@using BestMovies.Models

@inject IUserLoginService UserLoginService
@inject IUserService UserService
@inject IUserInteractionService UserInteractionService
@inject IMovieService MovieService

@if (_loading)
{
    <MudProgressCircular Indeterminate/>
}

else if (_userOfPage == null)
{
    <p>
        <em>No User found :/</em>
    </p>
}
else
{
    <MudPaper Elevation="0" Outlined="false" Style="margin-top: 1em;">

        <MudGrid href="@_userOfPage">
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardHeader>
                        <MudText Typo="Typo.h3">Info</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <!-- User information -->
                        <MudText Typo="Typo.overline">
                            @_userOfPage.Username
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <MudSpacer/>

            @* Right Side *@
            <MudItem>
                @* Favourite Movie Section *@
                <MudCard>
                    <MudCardContent>
                        @if (_favouriteMovies.IsNullOrEmpty())
                        {
                            <MudText Typo="Typo.overline">No Favourites</MudText>
                        }
                        else
                        {
                            <MudList>
                                @foreach (var m in _favouriteMovies)
                                {
                                    <MudListItem>
                                        <p>@m.Title</p>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudCardContent>
                </MudCard>

                @* Fan Movie Section *@
                <MudCard style="margin-top: 20px;">
                    <MudCardContent>
                        <MudStack AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h3">Fan Movies</MudText>
                            @if (_shownFanMovies.IsNullOrEmpty())
                            {
                                <MudText Typo="Typo.body2">No Fan Movies</MudText>
                            }
                            else
                            {
                                @if (_maxFanMovieTabs > 1)
                                {
                                    <MudPagination Count="@_maxFanMovieTabs" @bind-Selected="FanMovieTab"/>
                                }

                                @* List of Fan Movies *@
                                <MudList>
                                    @foreach (var m in _shownFanMovies)
                                    {
                                        <MudListItem>
                                            @* Title of the Fan Movie *@
                                            @* If this is clicked, it should show the description and cast set for the movie *@
                                            <p>@m.Title</p>
                                        </MudListItem>
                                    }
                                </MudList>
                            }

                            @* Create a Fan Movie button *@
                            @if (_isUsersOwnPage)
                            {
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CreateFanMovie">Create Fan Movie</MudButton>
                            }

                        </MudStack>
                    </MudCardContent>
                </MudCard>

            </MudItem>
        </MudGrid>
    </MudPaper>
}

@code {

    [Parameter]
    public string userOfPageID { get; set; }

    bool _loading = true;
    bool _isUsersOwnPage;

    User? _userOfPage;
    User? _currentUser;

    protected override async Task OnParametersSetAsync()
    {
        await SetUpUserPage();

        GetFanMovies();
        await GetFavouriteMovies();
        
    }

    private async Task SetUpUserPage()
    {
        // Get the 
        _currentUser = await UserLoginService.GetCurrentUserAsync();
        _userOfPage = await UserService.GetAsync(userOfPageID);
        
    // Check if the user is on their own page
        _isUsersOwnPage = _userOfPage.Id == _currentUser?.Id;

        _loading = false;
    }

    #region Fan Movies

        private const int FanMoviesShownInList = 5;

    private int _fanMovieTab = 1;

    private int FanMovieTab
    {
        get => _fanMovieTab;
        set
        {
            _fanMovieTab = value;
            UpdateShownFanMovies();
        }
    }

    private List<FanMovie> _fanMovies = new();
    private List<FanMovie> _shownFanMovies = new();
    private int _maxFanMovieTabs;

    private async Task GetFanMovies()
    {
    // Get all Fan Movies
        _fanMovies = await UserInteractionService.GetAllFanMoviesByUserAsync(userOfPageID);

    // Check for how many Tabs to create
        _maxFanMovieTabs = (int)Math.Ceiling((double)_fanMovies.Count / FanMoviesShownInList);

    // Update the visible list
        UpdateShownFanMovies();
    }

    
    private async Task UpdateShownFanMovies()
    {
    // Helper Variables for Skipping and Taking
        int toSkip = (_fanMovieTab - 1) * FanMoviesShownInList;
        int remainder = FanMoviesShownInList;

    // Check to see if there's enough for default "Take" value
        if (_fanMovies.Count - toSkip < FanMoviesShownInList)
            remainder = _fanMovies.Count % FanMoviesShownInList;

    // Change the movies in the shown list
        _shownFanMovies = _fanMovies.Skip(toSkip).Take(remainder).ToList();

    // UI update
        StateHasChanged();
    }

    #endregion

    #region Favourite Movies

    private List<long> _favouriteMovieIds = new();

    private int _favouriteMoviesShownInList = 5;
    private int _favouriteMovieTab = 0;
    private List<Movie> _favouriteMovies = new();
    private List<Movie> _shownFavMovies = new();
    private int _maxFavouriteMovieTabs;

    private async Task GetFavouriteMovies()
    {
        var favorites = await UserService.GetFavoritesOf(userOfPageID);
        

        foreach (var favorite in favorites)
        {
            
            if (favorite.Type != EntityType.Movie) continue;
            Movie m = await MovieService.GetMovieAsync(favorite.SubjectId);
            _favouriteMovies.Add(m);
        }
        
        _maxFavouriteMovieTabs = (_favouriteMovies?.Count / _favouriteMoviesShownInList) + 1 ?? 0;

    // Update what is shown
        UpdateShownFavouriteMovies();
    }

    private void UpdateShownFavouriteMovies()
    {
        _shownFavMovies = _favouriteMovies.Skip(_maxFavouriteMovieTabs * _favouriteMovieTab).Take(_maxFavouriteMovieTabs).ToList();

        StateHasChanged();
    }

    #endregion

    private void CreateFanMovie()
    {
        FanMovie newMovie = new FanMovie()
        {
            Id = Guid.Empty,
            UserId = _currentUser.Id,
            LinkedEntities = new(),
            Title = "Iroh: The Humble General",
            Description = "Avatar: The Last Airbender. But everything is from the perspective of General Iroh"
        };

        UserInteractionService.AddFanMovieAsync(newMovie);
    }

}