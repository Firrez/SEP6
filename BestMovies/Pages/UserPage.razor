@page "/UserPage/{userOfPageID}"
@using Microsoft.IdentityModel.Tokens
@using BestMovies.Services
@using BestMovies.Models.DbModels
@using BestMovies.Models.ApiModels
@using BestMovies.Models

@inject IUserLoginService UserLoginService
@inject IUserService UserService
@inject IUserInteractionService UserInteractionService
@inject IMovieService MovieService
@inject NavigationManager NavigationManager

@if (_loading)
{
    <MudProgressCircular Indeterminate/>
}

else if (_userOfPage == null)
{
    <p>
        <em>No User found :/</em>
    </p>
}
else
{
    <MudContainer>
        <MudPaper Elevation="0" Outlined="false" Style="margin-top: 1em;">

            <MudGrid href="@_userOfPage">
                <MudItem xs="12" sm="6" md="4">
                    <MudCard>
                        <MudCardHeader>
                            <MudText Typo="Typo.h3">Info</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <!-- User information -->
                            <MudText Typo="Typo.overline">
                                @_userOfPage.Username
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                

                @* Right Side *@
                <MudItem>
                    @* Favourite Movie Section *@
                    <MudCard>
                        <MudText Typo="Typo.h3">Top Three Movies</MudText>
                        <MudCardContent style="height:650px">
                            @if (_isUsersOwnPage)
                            { 
                                <MudIconButton OnClick="@ToggleOpenSelectTopThree" Class="ml-auto mr-n3 mb-1" Color="Color.Tertiary" Icon="@Icons.Material.Filled.Edit"/>
                                <MudPopover Open="@_isOpenSelectTopThree" Fixed="true" Class="px-4 pt-4" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter">
                                    <div class="d-flex flex-column">
                                        <FavouriteSection FavouriteMovies="@_favouriteMovies" MovieClickCallBack="@SelectNewTopThree"/>
                                        <MudButton OnClick="@ToggleOpenSelectTopThree" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                                    </div>
                                </MudPopover>
                            }
                            
                            @if (_favouriteMovies.IsNullOrEmpty())
                            {
                                <MudText Typo="Typo.overline">No Favourites</MudText>
                            }
                            else
                            {
                                <MudList>
                                    @foreach (var movie in _favouriteMoviesTopThree)
                                    {
                                        if (movie is null) continue;

                                        <MudListItem>
                                            <MudButton OnClick="@(() => NavigateToMovie(movie))">
                                                <img style="border-radius: 5%" src="@GetImage(movie.PosterPath)" width="92" alt="poster"/>
                                            </MudButton>
                                        </MudListItem>
                                    }
                                </MudList>
                            }
                        </MudCardContent>
                        
                    </MudCard>
                </MudItem>
                
                <MudItem>
                    
                    @* Fan Movie Section *@
                    <MudCard style="margin-top: 20px;">
                        <MudCardContent>
                            <MudStack AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h3">Fan Movies</MudText>
                                @if (_shownFanMovies.IsNullOrEmpty())
                                {
                                    <MudText Typo="Typo.body2">No Fan Movies</MudText>
                                }
                                else
                                {
                                    @if (_maxFanMovieTabs > 1)
                                    {
                                        <MudPagination Count="@_maxFanMovieTabs" @bind-Selected="FanMovieTab"/>
                                    }

                                    @* List of Fan Movies *@
                                    <MudList>
                                        @foreach (var m in _shownFanMovies)
                                        {
                                            <MudListItem>
                                                @* Title of the Fan Movie *@
                                                @* If this is clicked, it should show the description and cast set for the movie *@
                                                <p>@m.Title</p>
                                            </MudListItem>
                                        }
                                    </MudList>
                                }

                                @* Create a Fan Movie button *@
                                @if (_isUsersOwnPage)
                                {
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CreateFanMovie">Create Fan Movie</MudButton>
                                }

                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                    
                </MudItem>
                
                
                <MudPopover Open="@_isOpenCreateFanMovie" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter">
                    
                    <CreateFanmovie/>
                    <MudIconButton OnClick="@ClosePopover" Class="ml-auto mr-n3 mb-1" Icon="@Icons.Material.Filled.Close" Color="Color.Error"/>
                </MudPopover>
            </MudGrid>
        </MudPaper>
    </MudContainer>
    <MudSpacer/>
    <FavouriteSection FavouriteMovies="@_favouriteMovies" MovieClickCallBack="@NavigateToMovie" />
    
}

@code {
    
    private bool _isOpenCreateFanMovie;
    private bool _isOpenSelectTopThree;
    
    [Parameter]
    public string userOfPageID { get; set; }

    bool _loading = true;
    bool _isUsersOwnPage;

    User? _userOfPage;
    User? _currentUser;

    protected override async Task OnParametersSetAsync()
    {
        await SetUpUserPage();

        await GetFanMovies();
        await GetFavouriteMovies();
        
    }

    private async Task SetUpUserPage()
    {
        _currentUser = await UserLoginService.GetCurrentUserAsync();
        _userOfPage = await UserService.GetAsync(userOfPageID);
        
    // Check if the user is on their own page
        _isUsersOwnPage = _userOfPage.Id == _currentUser?.Id;

        _loading = false;
    }

    #region Fan Movies

        
    private const int FanMoviesShownInList = 5;

    private int _fanMovieTab = 1;

    private int FanMovieTab
    {
        get => _fanMovieTab;
        set
        {
            _fanMovieTab = value;
            UpdateShownFanMovies();
        }
    }

    private List<FanMovie> _fanMovies = new();
    private List<FanMovie> _shownFanMovies = new();
    private int _maxFanMovieTabs;

    private void ClosePopover()
    {
        _isOpenCreateFanMovie = false;
    }

    private async Task GetFanMovies()
    {
    // Get all Fan Movies
        _fanMovies = await UserInteractionService.GetAllFanMoviesByUserAsync(userOfPageID);

    // Check for how many Tabs to create
        _maxFanMovieTabs = (int)Math.Ceiling((double)_fanMovies.Count / FanMoviesShownInList);

    // Update the visible list
        UpdateShownFanMovies();
    }

    private async Task UpdateShownFanMovies()
    {
    // Helper Variables for Skipping and Taking
        int toSkip = (_fanMovieTab - 1) * FanMoviesShownInList;
        int remainder = FanMoviesShownInList;

    // Check to see if there's enough for default "Take" value
        if (_fanMovies.Count - toSkip < FanMoviesShownInList)
            remainder = _fanMovies.Count % FanMoviesShownInList;

    // Change the movies in the shown list
        _shownFanMovies = _fanMovies.Skip(toSkip).Take(remainder).ToList();

    // UI update
        StateHasChanged();
    }

    #endregion

    #region Favourite Movies

    private List<long> _favouriteMovieIds = new();
    private int _selectIndex = 1;
    private int _favouriteMoviesShownInList = 5;
    private int _favouriteMovieTab = 0;
    private Dictionary<Movie,Favourite> _favouriteMovies = new();
    private Movie[] _favouriteMoviesTopThree = new Movie[3];
    private List<Movie> _shownFavMovies = new();
    private int _maxFavouriteMovieTabs;

    
    private async Task GetFavouriteMovies()
    {
        var favorites = await UserService.GetFavoritesOf(userOfPageID);
        
        foreach (var favorite in favorites)
        {
            
            if (favorite.Type != EntityType.Movie) continue;
            
            Movie movie = await MovieService.GetMovieAsync(favorite.SubjectId);
            
            if (favorite.TopIndex is not null)
            {
                _favouriteMoviesTopThree[favorite.TopIndex.Value-1] = movie;
            }
            
            _favouriteMovies.Add(movie,favorite);
        }
        
    }
    

    #endregion
    
    private string GetImage(string? imagePath)
    {
        return imagePath.IsNullOrEmpty() ? ConfigVariables.NoImage : $"https://image.tmdb.org/t/p/w92{imagePath}";
    }
    
    private void NavigateToMovie(Movie movie)
    {
        NavigationManager.NavigateTo($"/Movie/{movie.Id}");
    }
    
    
    private void CreateFanMovie()
    {
        _isOpenCreateFanMovie = !_isOpenCreateFanMovie;
    }
    
    private void ToggleOpenSelectTopThree()
    {
        if (_isOpenSelectTopThree)
        {
            _isOpenSelectTopThree = false;
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        else
        {
            _selectIndex = 1;
            _isOpenSelectTopThree = true;
        }
            
        
    }
    
    private async void SelectNewTopThree(Movie movie)
    {
        
        var oldFavMovie = _favouriteMoviesTopThree[_selectIndex - 1];
        if (oldFavMovie is not null)
        {
            var oldFav = _favouriteMovies[oldFavMovie];
            oldFav.TopIndex = null;
            await UserService.UpdateFavourite(oldFav);
        }
        
        var newFav = _favouriteMovies[movie];
        newFav.TopIndex = _selectIndex;
        await UserService.UpdateFavourite(newFav);
        
        if (_selectIndex < 3) _selectIndex++;
    }
    
    
}